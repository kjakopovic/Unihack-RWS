AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  stack for managing news lambdas

Parameters:
  JwtSecretName:
    Type: String
    Description: Name of the secret in Secrets Manager that contains the JWT secret
    Default: python-lambda-app/prod/jwt-secret

  SecretsRegionName:
    Type: String
    Description: Region name where the secrets are stored
    Default: eu-central-1

# Global Settings
Globals:
  Function:
    Timeout: 60
    MemorySize: 256

Resources:
  # S3 buckets
  NewsImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
            AllowedOrigins:
              - "*"

  # API Gateway
  NewsServiceApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: api-v1
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  # DynamoDB Table definition
  NewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: news
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda Functions
  CreateNewsForCityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        CreateNewsForCityEndpoint:
          Type: HttpApi
          Properties:
            Path: /news/{city}
            Method: POST
            ApiId: !Ref NewsServiceApi

  DeleteNewsForCityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        DeleteNewsForCityEndpoint:
          Type: HttpApi
          Properties:
            Path: /news/{news_id}
            Method: DELETE
            ApiId: !Ref NewsServiceApi

  UpdateNewsForCityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        UpdateNewsForCityEndpoint:
          Type: HttpApi
          Properties:
            Path: /news/{city}
            Method: PUT
            ApiId: !Ref NewsServiceApi

  GetAllNewsForCityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        GetAllNewsForCityEndpoint:
          Type: HttpApi
          Properties:
            Path: /news/{city}
            Method: GET
            ApiId: !Ref NewsServiceApi

  GetNewsByIdFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        GetNewsByIdEndpoint:
          Type: HttpApi
          Properties:
            Path: /news/id/{news_id}
            Method: GET
            ApiId: !Ref NewsServiceApi

Outputs:
  NewsTableArn:
    Description: "News table ARN"
    Value: !GetAtt NewsTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NewsTableArn"

  NewsTableName:
    Description: "News table NAME"
    Value: !Ref NewsTable
    Export:
      Name: !Sub "${AWS::StackName}-NewsTableName"

  EndpointURI:
    Description: "API Endpoint URL"
    Value: !Sub "https://${NewsServiceApi}.execute-api.${AWS::Region}.amazonaws.com/api-v1"
    Export:
      Name: NewsServiceApiUrl
