AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Stack for third party services

Parameters:
  JwtSecretName:
    Type: String
    Description: Name of the secret in Secrets Manager that contains the JWT secret
    Default: python-lambda-app/prod/jwt-secret

  SecretsRegionName:
    Type: String
    Description: Region name where the secrets are stored
    Default: eu-central-1

# Global Settings
Globals:
  Function:
    Timeout: 60
    MemorySize: 512

Resources:
  # API Gateway
  TpsApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: api-v1
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  # DynamoDB Table definition
  SuperchargersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: superchargers
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  GarbageCansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: garbage_cans
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda Function
  GetAllSuperchargersInACityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          SUPERCHARGERS_TABLE_NAME: !Ref SuperchargersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Resource: "*"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
      Events:
        GetAllSuperchargersInACityEndpoint:
          Type: HttpApi 
          Properties:
            Path: /superchargers/{city}
            Method: GET
            ApiId: !Ref TpsApi

  CreateNewSuperchargerInACityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          SUPERCHARGERS_TABLE_NAME: !Ref SuperchargersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Resource: "*"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
      Events:
        CreateNewSuperchargerInACityEndpoint:
          Type: HttpApi 
          Properties:
            Path: /superchargers/{city}
            Method: POST
            ApiId: !Ref TpsApi

  DeleteSuperchargerInACityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          SUPERCHARGERS_TABLE_NAME: !Ref SuperchargersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Resource: "*"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
      Events:
        DeleteSuperchargerInACityEndpoint:
          Type: HttpApi 
          Properties:
            Path: /superchargers/{charger_id}
            Method: DELETE
            ApiId: !Ref TpsApi

  UpdateSuperchargerInACityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          SUPERCHARGERS_TABLE_NAME: !Ref SuperchargersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Resource: "*"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
      Events:
        UpdateSuperchargerInACityEndpoint:
          Type: HttpApi 
          Properties:
            Path: /superchargers/{charger_id}
            Method: PUT
            ApiId: !Ref TpsApi

  GetAllGarbageCansInACityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          GARBAGE_CANS_TABLE_NAME: !Ref GarbageCansTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Resource: "*"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
      Events:
        GetAllGarbageCansInACityEndpoint:
          Type: HttpApi 
          Properties:
            Path: /garbage/{city}
            Method: GET
            ApiId: !Ref TpsApi

  CreateNewGarbageCansInACityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          GARBAGE_CANS_TABLE_NAME: !Ref GarbageCansTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Resource: "*"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
      Events:
        CreateNewGarbageCansInACityEndpoint:
          Type: HttpApi 
          Properties:
            Path: /garbage/{city}
            Method: POST
            ApiId: !Ref TpsApi

  DeleteGarbageCansInACityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          GARBAGE_CANS_TABLE_NAME: !Ref GarbageCansTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Resource: "*"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
      Events:
        DeleteGarbageCansInACityEndpoint:
          Type: HttpApi 
          Properties:
            Path: /garbage/{container_id}
            Method: DELETE
            ApiId: !Ref TpsApi

  UpdateGarbageCansInACityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          GARBAGE_CANS_TABLE_NAME: !Ref GarbageCansTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Resource: "*"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
      Events:
        UpdateGarbageCansInACityEndpoint:
          Type: HttpApi 
          Properties:
            Path: /garbage/{container_id}
            Method: PUT
            ApiId: !Ref TpsApi

  FetchParkingDataFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      CodeUri: ./  # Ensure your fetch_parking_data.py is in the root directory or adjust the path accordingly
      Environment:
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"
      Events:
        FetchParkingDataEndpoint:
          Type: HttpApi
          Properties:
            Path: /parking-data
            Method: GET
            ApiId: !Ref TpsApi

Outputs:
  EndpointURI:
    Description: "API Endpoint URL"
    Value: !Sub "https://${TpsApi}.execute-api.${AWS::Region}.amazonaws.com/api-v1"
    Export:
      Name: TpsApiUrl